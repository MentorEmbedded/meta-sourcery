From c76f28ce49ea17f09a27052f033ee536fed8d16e Mon Sep 17 00:00:00 2001
From: Florian Weimer <fweimer@redhat.com>
Date: Tue, 27 Nov 2018 16:12:43 +0100
Subject: [PATCH 3/7] CVE-2018-19591: if_nametoindex: Fix descriptor for
 overlong name [BZ #23927]

(cherry picked from commit d527c860f5a3f0ed687bd03f0cb464612dc23408)

CVE: CVE-2018-19591
Signed-off-by: Christopher Larson <chris_larson@mentor.com>
---
 ChangeLog                          |  7 +++++++
 NEWS                               |  5 +++++
 sysdeps/unix/sysv/linux/if_index.c | 11 ++++++-----
 3 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 0f018d7f4e..d05ff1678d 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -11,6 +11,13 @@
 
 	* resolv/inet_addr.c: Reformat to GNU style.
 	(__inet_addr, __inet_aton): Update comment.
+    
+2018-11-27  Florian Weimer  <fweimer@redhat.com>
+
+	[BZ #23927]
+	CVE-2018-19591
+	* sysdeps/unix/sysv/linux/if_index.c (__if_nametoindex): Avoid
+	descriptor leak in case of ENODEV error.
 
 2018-07-04  Adhemerval Zanella  <adhemerval.zanella@linaro.org>
 
diff --git a/NEWS b/NEWS
index 2443880321..c1730c6b88 100644
--- a/NEWS
+++ b/NEWS
@@ -26,6 +26,10 @@ Security related changes:
   architecture could write beyond the target buffer, resulting in a buffer
   overflow.  Reported by Andreas Schwab.
 
+  CVE-2018-19591: A file descriptor leak in if_nametoindex can lead to a
+  denial of service due to resource exhaustion when processing getaddrinfo
+  calls with crafted host names.  Reported by Guido Vranken.
+
 The following bugs are resolved with this release:
 
   [6889] 'PWD' mentioned but not specified
@@ -64,6 +68,7 @@ The following bugs are resolved with this release:
   [23196] __mempcpy_avx512_no_vzeroupper mishandles large copies
   [23236] Harden function pointers in _IO_str_fields
   [23264] libc: posix_spawnp wrongly executes ENOEXEC in non compat mode
+  [23927] Linux if_nametoindex() does not close descriptor (CVE-2018-19591)
 
 
 Version 2.27
diff --git a/sysdeps/unix/sysv/linux/if_index.c b/sysdeps/unix/sysv/linux/if_index.c
index e3d08982d9..782fc5e175 100644
--- a/sysdeps/unix/sysv/linux/if_index.c
+++ b/sysdeps/unix/sysv/linux/if_index.c
@@ -38,11 +38,6 @@ __if_nametoindex (const char *ifname)
   return 0;
 #else
   struct ifreq ifr;
-  int fd = __opensock ();
-
-  if (fd < 0)
-    return 0;
-
   if (strlen (ifname) >= IFNAMSIZ)
     {
       __set_errno (ENODEV);
@@ -50,6 +45,12 @@ __if_nametoindex (const char *ifname)
     }
 
   strncpy (ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
+
+  int fd = __opensock ();
+
+  if (fd < 0)
+    return 0;
+
   if (__ioctl (fd, SIOCGIFINDEX, &ifr) < 0)
     {
       int saved_errno = errno;
-- 
2.28.0

